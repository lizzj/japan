<?php

namespace App\Repositories\Eloquent\System\Payment;

use App\Exceptions\Exception\ErrorException;
use App\Repositories\Interfaces\System\Payment\AlipayRepository;
use App\Repositories\Interfaces\System\Payment\WechatRepository;
use App\Repositories\Presenters\System\Payment\LogPresenter;
use Illuminate\Support\Str;
use Prettus\Repository\Eloquent\BaseRepository;
use Prettus\Repository\Criteria\RequestCriteria;
use App\Repositories\Interfaces\System\Payment\LogRepository;
use App\Models\System\Payment\Log;

/**
 * Class LogRepositoryEloquent.
 *
 * @package namespace App\Repositories\Eloquent\System\Payment;
 */
class LogRepositoryEloquent extends BaseRepository implements LogRepository
{
    /**
     * Specify Model class name
     *
     * @return string
     */
    public function model()
    {
        return Log::class;
    }

    public function presenter()
    {
        return app(LogPresenter::class); // TODO: Change the autogenerated stub
    }


    /**
     * Boot up the repository, pushing criteria
     */
    public function boot()
    {

    }

    public function createNo($data, $option)
    {
        switch ($option) {
            case 'alipay':
                $out_trade_no = 'A' . str_replace(['online', 'level'], ['O', 'L'], $data['relate_type']) . 'T' . $data['user_id'] . 'U' . date('YmdHis') . random_int(100, 999);
                break;
            case 'wechat':
                $out_trade_no = 'W' . str_replace(['online', 'level'], ['O', 'L'], $data['relate_type']) . 'T' . $data['user_id'] . 'U' . date('YmdHis') . random_int(100, 999);
                break;
            default:
                throw new ErrorException('ParameterException', arrayTransitionObject(['message' => '参数错误']));
        }
        return $out_trade_no;
    }

    public function verifyPayment($option)
    {
        /**
         * 查看是否有对应的支付账号--如果有怎返回id--没有返回false
         */
        if ($option === 'wechat') {
            return app(WechatRepository::class)->randomAccount();
        } elseif ($option === 'alipay') {
            return app(AlipayRepository::class)->randomAccount();
        } else {
            return false;
        }
    }

    public function processLog($data, $type)
    {
        if ($account_id = $this->verifyPayment($type)) {
            $data['account_id'] = $account_id;
            $data['account_type'] = $type;
            $data['out_trade_no'] = $this->createNo($data, $type);
            $data['token'] = Str::random(16);
            return $this->create($data)['data']['id'];
        }
        return false;
    }

    public function adminList($data)
    {
        return $this->scopeQuery(function ($query) use ($data) {
            return $query->where('out_trade_no', 'like', '%' . $data['title'] . '%')->where($data['array'])->where(['status' => 'success'])->whereBetween('notify_at', $data['interval']);
        })->orderBy('id', 'desc')->paginate($data['limit']);
    }

    public function exportList($data)
    {
        return $this->scopeQuery(function ($query) use ($data) {
            return $query->where('out_trade_no', 'like', '%' . $data['title'] . '%')->where($data['array'])->where(['status' => 'success'])->whereBetween('notify_at', $data['interval']);
        })->orderBy('id', 'desc')->all();
    }
}
