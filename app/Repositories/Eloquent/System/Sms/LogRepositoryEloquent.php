<?php

namespace App\Repositories\Eloquent\System\Sms;

use App\Exceptions\Exception\ErrorException;
use App\Jobs\System\Sms\Send;
use App\Models\System\Sms\Roster;
use App\Repositories\Interfaces\System\Sms\ConfigRepository;
use App\Repositories\Interfaces\System\Sms\TemplateRepository;
use App\Repositories\Presenters\System\Sms\LogPresenter;
use Prettus\Repository\Eloquent\BaseRepository;
use Prettus\Repository\Criteria\RequestCriteria;
use App\Repositories\Interfaces\System\Sms\LogRepository;
use App\Models\System\Sms\Log;

/**
 * Class LogRepositoryEloquent.
 *
 * @package namespace App\Repositories\Eloquent\System\Sms;
 */
class LogRepositoryEloquent extends BaseRepository implements LogRepository
{
    /**
     * Specify Model class name
     *
     * @return string
     */
    public function model()
    {
        return Log::class;
    }

    public function presenter()
    {
        return app(LogPresenter::class); // TODO: Change the autogenerated stub
    }

    /**
     * Boot up the repository, pushing criteria
     */
    public function boot()
    {

    }

    public function handleData($data)
    {
        switch ($data['kind']) {
            case 'code':
                $data['content'] = ['code' => random_int(100000, 999999)];
                break;
            default:
                throw new ErrorException('ParameterException', arrayTransitionObject(['message' => '参数错误']));
        }
        return $data;
    }

    public function whiteArray()
    {
        return Roster::where(['type' => 'white'])->pluck('phone')->toArray();
    }

    /**
     * @param $data
     * @Notes:处理发送短信
     * @author: Je t'aime
     * @Time: 2021/11/8 16:01
     */
    public function handleSend($data)
    {
        $config = app(ConfigRepository::class)->find(1)['data'];
        if (!in_array($data['phone'], $this->whiteArray(), true)) {
            if ($this->verifyThrottle($data['phone'], $data['type'], $config['throttle'])) {
                return 30004;
            }
            if ($this->verifyThreshold($data['phone'], $config['threshold'])) {
                return 30003;
            }
        }
        $data = $this->handleData($data);
        $data['template_id'] = $this->findTemplate($config['default'], $data['kind']);
        if ($template_id = $this->findTemplate($config['default'], $data['kind'])) {
            $data['template_id'] = $template_id;
        } else {
            return 30013;
        }
        $data['operator'] = $config['default'];
        Send::dispatch($this->create($data)['data']['id']);
        return 31000;
    }

    public function findTemplate($default, $kind)
    {
        //根据选择的默认短信运营商和要发送的code类 来判断有没有模板,如果有模板则返回模板id,如果没有则返回错误
        $template = app(TemplateRepository::class);
        $result = $template->findWhere(['belong' => $default, 'code' => $kind])['data'];
        if (count($result) === 0) {
            return false;
        } else {
            return $result[0]['id'];
        }
    }

    /**
     * @Notes:验证频率
     * @author: Je t'aime
     * @Time: 2021/8/16 9:37
     */
    public function verifyThrottle($phone, $type, $num)
    {
        $sendInfo = Log::where(['phone' => $phone, 'type' => $type])->orderBy('id', 'desc')->first();
        if ($sendInfo && $sendInfo->created_at->timestamp > time() - $num) {
            return true;
        }
        return false;
    }

    /**
     * @Notes: 验证当天
     * @author: Je t'aime
     * @Time: 2021/8/16 9:37
     */
    public function verifyThreshold($phone, $num)
    {
        $sendCount = Log::where(['phone' => $phone])->whereBetween('created_at', NowDayTime())->count();
        if ($sendCount >= $num) {
            return true;
        }
        return false;
    }

    public function handleResult($result, $operator)
    {
        switch ($operator) {
            case 'aliyun':
                if ($result['Code'] === 'OK') {
                    $data['send_code'] = 'success';
                    $data['send_msg'] = $result['Message'];
                    $data['send_at'] = time();
                } else {
                    $data['send_code'] = 'fail';
                    $data['send_msg'] = $result['Message'];
                }
                break;
            default:
                throw new ErrorException('ParameterException', arrayTransitionObject(['message' => '参数错误']));
        }
        return $data;
    }

    public function processResult($data, $id, $operator)
    {
        $this->update($this->handleResult($data, $operator), $id);
    }

    public function verifyCode($phone, $code, $type)
    {
        //后弦查找是不是存在,如果存在在验证是否过期
        if (!in_array($phone, $this->whiteArray(), true)) {
            $result = Log::where(['phone' => $phone, 'type' => $type, 'verify' => 'no'])->where('send_at', '>', time() - 600)->first();
            if ($result && $result->content['code'] === (int)$code) {
                $this->update(['verify' => 'yes'], $result->id);
                return false;
            }
            return true;
        }
        return false;
    }
}
