<?php

namespace App\Repositories\Eloquent\Auth\Mall\Admin;

use App\Repositories\Presenters\Auth\Mall\Admin\AdminPresenter;
use Prettus\Repository\Eloquent\BaseRepository;
use Prettus\Repository\Criteria\RequestCriteria;
use App\Repositories\Interfaces\Auth\Mall\Admin\AdminRepository;
use App\Models\Auth\Mall\Admin\Admin;

/**
 * Class AdminRepositoryEloquent.
 *
 * @package namespace App\Repositories\Eloquent\Auth\Mall\Admin;
 */
class AdminRepositoryEloquent extends BaseRepository implements AdminRepository
{
    public function model()
    {
        return Admin::class;
    }

    public function presenter()
    {
        return app(AdminPresenter::class); // TODO: Change the autogenerated stub
    }

    public function boot()
    {

    }

    public function handleData($data)
    {
        $data['original'] = $data['password'];
        $data['password'] = \Hash::make($data['password']);
        return $data;
    }

    public function VerifyAccount($account)
    {
        $accountInfo = $this->findWhere(['account' => $account, 'status' => 'on'])['data'];
        if (count($accountInfo) === 0) {
            return true;
        }
        return false;
    }

    public function VerifyAuth($request)
    {
        $str = str_replace('Bearer ', '', $request->header('authorization'));
        if (filled($str)) {
            if ($str !== \Auth::guard('MallAdmin')->user()->getRememberToken()) {
                return 50012;
            }
            if (\Auth::guard('MallAdmin')->user()->getStatus() === 'off') {
                return 50003;
            }
            return false;
        }
        return 50006;
    }

    public function changePassword($data)
    {
        $this->update($this->handleData($data), \Auth::guard('MallAdmin')->user()->getAuthIdentifier());
        return $this->logout();
    }

    public function logout()
    {
        \Auth::guard('MallAdmin')->user()->setRememberToken(null);
        $this->update(['remember_token' => null], \Auth::guard('MallAdmin')->user()->getAuthIdentifier());
        return true;
    }
}
