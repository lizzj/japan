<?php

namespace App\Repositories\Eloquent\Auth\User;

use App\Jobs\Auth\User\Level\Change;
use App\Models\Auth\User\User;
use App\Repositories\Interfaces\Auth\User\UserRepository;
use App\Repositories\Presenters\Auth\User\UserPresenter;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use Prettus\Repository\Eloquent\BaseRepository;

/**
 * Class UserRepositoryEloquent.
 *
 * @package namespace App\Repositories\Eloquent\Auth\User;
 */
class UserRepositoryEloquent extends BaseRepository implements UserRepository
{
    /**
     * Specify Model class name
     *
     * @return string
     */
    public function model()
    {
        return User::class;
    }

    public function presenter()
    {
        return app(UserPresenter::class); // TODO: Change the autogenerated stub
    }

    /**
     * Boot up the repository, pushing criteria
     */
    public function boot()
    {

    }

    public function remote($user)
    {
        $array_name = ArrayObject(User::whereRaw("(concat(name,phone) like '%" . $user . "%')")->where(['status' => 'on'])->pluck('name', 'id'));
        $array_phone = ArrayObject(User::whereRaw("(concat(name,phone) like '%" . $user . "%')")->where(['status' => 'on'])->pluck('phone', 'id'));
        $array = [];
        for ($i = 0, $iMax = count($array_name); $i < $iMax; $i++) {
            $array[$i]['key'] = $array_name[$i]['key'];
            $array[$i]['name'] = $array_name[$i]['name'] . '--' . $array_phone[$i]['name'];
        }
        return $array;
    }

    public function adminList($title, $array, $limit, $interval)
    {
        return $this->scopeQuery(function ($query) use ($title, $array, $interval) {
            return $query->whereRaw("(concat(name,phone) like '%" . $title . "%')")->where($array)->whereBetween('created_at', $interval);
        })->orderBy('id', 'desc')->paginate($limit);
    }

    public function lowerList($id, $limit)
    {
        return $this->scopeQuery(function ($query) use ($id) {
            return $query->where(['pid' => $id]);
        })->orderBy('id', 'desc')->paginate($limit);
    }

    public function verifyAuth($request)
    {
        $str = str_replace('Bearer ', '', $request->header('authorization'));
        if (filled($str)) {
            if ($str !== \Auth::guard('Client')->user()->getRememberToken()) {
                return 50014;
            }
            if (\Auth::guard('Client')->user()->getStatus() === 'off') {
                return 50003;
            }
            return false;
        }
        return 50006;
    }

    public function verifyPhone($phone)
    {
        $result = $this->findWhere(['phone' => $phone])['data'];
        if (count($result) > 0) {
            return true;
        }
        return false;
    }

    public function verifyParent($old_id, $new_id, $user_id)
    {
        $this->update(['pid' => $new_id], $user_id);
        $count = User::count();
        if (!$this->findTop($user_id, 0, $count)) {
            $this->update(['pid' => $old_id], $user_id);
            return false;
        }
        return true;
    }

    public function findTop($id, $num, $total)
    {
        $userInfo = $this->find($id)['data'];
        if ($userInfo['pid'] !== 0) {
            if ($num > $total) {
                return false;
            } else {
                return $this->findTop($userInfo['pid'], $num + 1, $total);
            }
        } else {
            return true;
        }
    }

    public function changePassword($password, $id)
    {
        $data['original'] = $password;
        $data['password'] = Hash::make($password);
        $data['remember_token'] = null;
        $this->update($data, $id);
        return true;
    }

    public function register($data)
    {
        $data['original'] = $data['password'];
        $data['password'] = Hash::make($data['password']);
        $data['token'] = Str::random(12);
        $this->create($data);
        Change::dispatch(1, 'count', 1);
    }

    public function logout()
    {
        \Auth::guard('Client')->user()->setRememberToken(null);
        $this->update(['remember_token' => null], \Auth::guard('Client')->user()->getAuthIdentifier());
        return true;
    }
}
