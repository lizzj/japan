<?php

namespace Modules\Mall\Repositories\Eloquent\Member\Asset;

use App\Exceptions\Exception\ErrorException;
use App\Jobs\Auth\User\User\Change;
use App\Repositories\Interfaces\Auth\User\UserRepository;
use Modules\Mall\Entities\Member\Asset\Balance;
use Modules\Mall\Repositories\Interfaces\Member\Asset\BalanceRepository;
use Modules\Mall\Repositories\Presenters\Member\Asset\BalancePresenter;
use Prettus\Repository\Eloquent\BaseRepository;

/**
 * Class VideoRepositoryEloquent.
 *
 * @package namespace App\Repositories\Eloquent;
 */
class BalanceRepositoryEloquent extends BaseRepository implements BalanceRepository
{
    /**
     * Specify Model class name
     *
     * @return string
     */
    public function model()
    {
        return Balance::class;
    }

    public function presenter()
    {
        return app(BalancePresenter::class); // TODO: Change the autogenerated stub
    }

    /**
     * Boot up the repository, pushing criteria
     */
    public function boot()
    {

    }

    public function handleData($data, $relate_key)
    {
        switch ($relate_key) {
            case 1:
                $data['content'] = '后台增加,账户余额 ' . $data['num'];
                $data['source'] = 'adminInc';
                break;
            case 2:
                $data['content'] = '后台核减,账户余额 ' . $data['num'];
                $data['source'] = 'adminDec';
                break;
            case 3:
                $data['content'] = '订单消费,使用余额 ' . $data['num'];
                $data['source'] = 'orderExpense';
                break;
            case 4:
                $data['content'] = '订单退款,退还余额 ' . $data['num'];
                $data['source'] = 'orderRefund';
                break;
            case 5:
                $data['content'] = '支付宝在线充值,充值余额' . $data['num'];
                $data['source'] = 'rechargeAlipay';
                break;
            case 6:
                $data['content'] = '微信在线充值,充值余额' . $data['num'];
                $data['source'] = 'rechargeWechat';
                break;
            default:
                throw new ErrorException('ParameterException', arrayTransitionObject(['message' => '参数错误']));
        }
        return $data;
    }

    public function processLog($data, $relate_key)
    {
        $user = app(UserRepository::class);
        $userInfo = $user->find($data['user_id'])['data'];
        $log = [
            'user_id' => $data['user_id'],
            'num' => $data['num'],
            'before' => $userInfo['balance'],
            'type' => $data['type'],
            'relate' => $data['relate'] ?? null,
            'relate_id' => $data['relate_id'] ?? null,
            'after' => $this->processAfter($userInfo['balance'], $data['num'], $data['type']),
        ];
        Change::dispatch($data['user_id'], 'balance', $data['type'] === 'inc' ? $data['num'] : -$data['num']);
        $this->create($this->handleData($log, $relate_key));
    }

    public function processAfter($old, $num, $type)
    {
        if ($type === 'inc') {
            return $old + $num;
        }
        return $old - $num;
    }

    public function adminList($title, $array, $limit, $interval)
    {
        return $this->scopeQuery(function ($query) use ($title, $array, $interval) {
            return $query->whereRaw("(concat(source,content) like '%" . $title . "%')")->where($array)->whereBetween('created_at', $interval);
        })->orderBy('id', 'desc')->paginate($limit);
    }

    public function selfList($array, $interval, $limit)
    {
        return $this->scopeQuery(function ($query) use ($array, $interval) {
            return $query->where($array)->whereBetween('created_at', $interval);
        })->orderBy('id', 'desc')->paginate($limit);
    }
}
